import argparse
import os
import random
from greedy import *

argParser = argparse.ArgumentParser()

argParser.add_argument('-a', '--agg_results', type = str, help = 'Filepath to aggregated solutions (generated by agg.py)')
argParser.add_argument('-r', '--results_filepath', type = str, help = 'Filepath to Hamming results file')

args = argParser.parse_args()

with open(args.agg_results, 'r') as f:
    sols = f.readlines()

for instance_file in os.listdir('unique_results'):
    if instance in instance_file:

        weights_type = instance_file.split('_')[1].split('.')[0]
        
        with open(f'unique_results/{instance_file}', 'r') as f:
            solutions = f.read()

        general_solutions = solutions.split('\n')[:100]

        shuffle_solutions = general_solutions.copy()
        random.shuffle(shuffle_solutions)
        greedy_solutions = choose_greedy([x for x in general_solutions], len(general_solutions))
        
        solution_sets = [general_solutions, shuffle_solutions, greedy_solutions]
        methods = ['Solution Pool', 'Random Shuffle', 'Greedy']

        if not os.path.exists(f'hamming_results/{instance}.txt'):
            with open(f'hamming_results/{instance}.txt', 'w') as f:
                f.write('sol_number,avg_hamming,weights,Method\n')
                f.close()

        for method, solutions in zip(methods, solution_sets):
            hamming_averages = []
            hamming_distances = []
            for i in range(1, 100):
                for j in range(i):
                    hamming_distances.append(len([x for x, y in zip(solutions[i], solutions[j]) if x != y]))
                hamming_averages.append(f'{i},{statistics.mean(hamming_distances)/len(solutions[i])},{weights_type},{method}')

            with open(f'hamming_results/{instance}.txt', 'a') as f:
                f.write('\n'.join(hamming_averages) + '\n')
                f.close()